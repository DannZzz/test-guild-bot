import { fetchGuild, getMemberGuild, hasPermissionsInGuild } from "../../database/db";
import { GuildSchema } from "../../database/models/guildSchema";
import { Embed } from "../../structures/Embed";
import { MessageCommand } from "../../structures/MessageCommand";
import { Pagination } from "../../structures/Pagination";

export default new MessageCommand ({
    name: "bans",
    description: "–±–∞–Ω—ã –≤–∞—à–µ–π –≥–∏–ª—å–¥–∏–∏",
    category: 1,
    cooldown: 3,
    run: async ({client, msg, prefix}) => {
        const guild = await getMemberGuild(msg.author.id) as GuildSchema;
        if (!guild) return Embed(msg).setError("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥–∏–ª—å–¥–∏–∏.").send();
        if(!hasPermissionsInGuild(guild, msg.author.id)) return Embed(msg).setError("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.").send();
        const fetch = await fetchGuild(guild.name, {bans: true});
        const texted = fetch.bans.map((id, i) => {
            var name = "–í—ã—à–µ–ª –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞";
            const member = msg.guild.members.cache.get(id);
            if (member) name = member.user.tag;
            return `**${i+1}.** ${name} (${id})`;
        });

        let i = 0;
        const embeds = []
        while (i < texted.length) {
            const sliced = texted.slice(i, i+10);
            embeds.push(Embed(msg).setAuthor({name: `üî® | –ë–∞–Ω—ã ${guild.name} [${texted.length}]`}).setText(`–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: \`${prefix}unban @Dann#1000\`\n–†–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö: \`${prefix}unban all\`\n\n${sliced.join("\n")}`));
            i += 10;
        }

        if (embeds.length === 0) embeds.push(Embed(msg).setAuthor({name: `üî® | –ë–∞–Ω—ã ${guild.name} [${texted.length}]`}).setText(`–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: \`${prefix}unban @Dann#1000\`\n–†–∞–∑–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö: \`${prefix}unban all\`\n\n–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö :)`))

        await new Pagination({embeds, timeout: 30000, validIds: [msg.author.id], message: msg}).createSimplePagination();
    
    }
})